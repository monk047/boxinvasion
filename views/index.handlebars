<h3 class="page-header text-center">Connect the dots and capture a Box!</h3>
<p class="text-center">Welcome to your dashboard</p>


<div class="container container-margin" style="max-width: 1400px;">
    <div class="row chat-window col-xs-4 col-md-4" id="chat_window" style="margin-left:-50px;">
        <!--<div class="col-xs-12 col-md-12">-->
        <div class="panel">

            <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.7.3/socket.io.js"></script>
            <script src="../public/js/chat.js"></script>
            <link href="../public/css/chat.css" rel="stylesheet" />
            <div id="box-invasion-chat-div">
                <h2>Discussion</h2>
                <div id="box-invasion-chat-win" style="margin-bottom: 0px">
                    <div id="messageArea">
                        <div id="typingMessage"> </div>
                    </div>
                    <input id="user" type="text" placeholder="User" />
                    <input id="message" type="text" placeholder="Message" />
                    <button id="send">Send</button>
                </div>

            </div>

            <script>

                // var socket = io.connect('http://localhost:3000');
                var socket = io();
                var message = document.getElementById('message');
                user = document.getElementById('user');
                btn = document.getElementById('send');
                messageArea = document.getElementById('messageArea');
                feedback = document.getElementById('typingMessage');

                // Emit events
                btn.addEventListener('click', function(){
                    socket.emit('chat', {
                        message: message.value,
                        user: user.value
                    });
                    message.value = "";
                });
                message.addEventListener('keypress', function(event){

                    if (event.key === "Enter") {
                        socket.emit('chat', {
                            message: message.value,
                            user: user.value
                        });
                        message.value = "";
                    }

                    socket.emit('typing', user.value);
                })
                // Listen for events
                socket.on('chat', function(data){
                    feedback.innerHTML = '';
                    messageArea.innerHTML += '<p><strong>' + data.user + ': </strong>' + data.message + '</p>';
                });
                socket.on('typing', function(data){
                    typingMessage.innerHTML = '<p><em>' + data + ' is typing a message...</em></p>';
                });
            </script>
        </div>
    </div>
    <!--</div>-->
    <div class="row col-xs-4 col-md-4" id="game_area" style="margin-left:-12px;">
        <canvas id="canvas"></canvas>
        <!-- <script src="../models/UI.js"></script>-->
        <script>

            var canvas = document.querySelector('canvas');
            //Canvas Dimension
            var cnvW = 500+20;
            var cnvH = 500+20;
            //Setting Canvas Dimensions
            canvas.width = cnvW;
            canvas.height = cnvH;
            //Context variable
            var c = canvas.getContext('2d');
            /***************************************************/
            //Array of the objects
            //var board [11][11];
            /***************************************************/
            //RENDER DOTS
            var dotX =0;
            var dotY =0;
            var dotHeight = 20;
            var dotWidth = 20;
            //DOT COLOR
            c.fillStyle ='#469280';// 'rgba(27, 71, 142,0.75)';

            // varaibles
            var numberOfDots = 6;
            var cellWidth = 100;

            //Loop to render the dots
            for (var i = dotX; i < numberOfDots; i++) {
                for (var j = dotY; j < numberOfDots; j++) {
                    c.fillRect(i*cellWidth, j*cellWidth, dotWidth, dotHeight);
                }
            }
            /***************************************************/
            //RENDER H-LINES
            var hLineX = 20;
            var hLineY = 0;
            var hLineW = 80;
            var hLineH = 20;
            //H LINE COLOR
            c.fillStyle = '#1d5a67';//'rgba(250, 144, 33,0.7)';
            //Lopp to render H-lines
            for (var i = 0; i < numberOfDots -1 ; i++) {
                for (var j = 0; j < numberOfDots; j++) {
                    //c.fillRect((i*cellWidth)+hLineX,(j*cellWidth)+hLineY, hLineW, hLineH);
                }
            }
            /***************************************************/
            //RENDER V-LINES
            var vLineX = 0;
            var vLineY = 20;
            var vLineW = 20;
            var vLineH = 80;
            //V LINE COLOR
            c.fillStyle = '#1d5a67';//'rgba(250, 144, 33,0.7)';
            //Lopp to render V-lines
            for (var i = 0; i < numberOfDots; i++) {
                for (var j = 0; j < numberOfDots-1; j++) {
                    // c.fillRect((i*cellWidth)+vLineX,(j*cellWidth)+vLineY, vLineW, vLineH);
                }
            }
            /***************************************************/

            /*
            c.fillRect(dotX+100,dotY+100,dotWidth,dotHeight);
            c.fillStyle = 'rgba(255, 255, 140, 0.9)';
            c.fillRect(dotX+500,dotY+500,dotWidth,dotHeight);
            c.fillStyle = 'rgba(255, 255, 140, 0.9)';
            c.fillRect(dotX+200,dotY+400,dotWidth,dotHeight);
            console.log("Print Done");
            */
            /***************************************************/
            //filled rect starts
            /*var RectX = 20;
            var RectY =20;
            var RectWidth = 80;
            var RectHeight =80;
            c.fillStyle = 'rgba(255, 0, 0, .4)';//'#131a67';
            c.fillRect(RectX,RectY, RectWidth, RectHeight);
            c.fillStyle = 'rgba(0, 0, 255, .4)';//'#131a67';
            c.fillRect(RectX +100,RectY +100, RectWidth, RectHeight);
            //write player no
            c.fillStyle = 'rgba(0, 0, 0, 1)';//'#131a67';
            c.font = "18px Times New Roman";
            c.fillText('P1',52,60);
            c.fillText('P2',152,160);*/
            //filled rect ends
            /******************************************************/
            var ArrForStoringTurnStatus = [[],[] ,[] ,[] ,[] ]; // 2d array
            var canvas = document.getElementById("canvas");
            var count = 0;
            canvas.addEventListener('click', getPosition , false);

            function getPosition(event)
            {
                x = event.offsetX || event.layerX ;
                y = event.offsetY || event.layerY ;

                IsHorizontal(x,y);
                IsVertical(x,y);

                // alert("x: " + x + "  y: " + y);
            }


            function IsHorizontal(x ,y)
            {
                var IsHorizontal =false;
                var HorizontalLineNumber = Math.floor(x / 100);
                var VerticalLineNumber = Math.floor(y / 100);
                var XVal = x % 100;
                var YVal = y % 100;
                if( (XVal > 20 && XVal < 100)  && (YVal > 0  && YVal < 20) )
                {

                    IsHorizontal = true;
                    // alert("Horizontal -- Horizontal line no : " +HorizontalLineNumber + " Vertical line no: " + VerticalLineNumber);
                    var hLineX = 20;
                    var hLineY = 0;
                    var hLineW = 80;
                    var hLineH = 20;
                    //alert("H: " + HorizontalLineNumber + ", V: " + VerticalLineNumber );

                    //PopulateArray(HorizontalLineNumber , VerticalLineNumber);
                    c.fillStyle = '#1d5a67';//'rgba(250, 144, 33,0.7)';
                    c.fillRect((HorizontalLineNumber*cellWidth)+hLineX,(VerticalLineNumber*cellWidth)+hLineY, hLineW, hLineH);
                }
                return IsHorizontal;
            }

            function IsVertical(x ,y)
            {
                var IsVertical =false;
                var HorizontalLineNumber = Math.floor(x / 100);
                var VerticalLineNumber = Math.floor(y / 100);
                var XVal = x % 100;
                var YVal = y % 100;
                if( (XVal > 0 && XVal < 20)  && (YVal > 20  && YVal < 100) )
                {
                    IsVertical = true;
                    // alert("Horizontal -- Horizontal line no : " +HorizontalLineNumber + " Vertical line no: " + VerticalLineNumber);
                    var vLineX = 0;
                    var vLineY = 20;
                    var vLineW = 20;
                    var vLineH = 80;
                    //alert("H: " + HorizontalLineNumber + ", V: " + VerticalLineNumber );
                    c.fillStyle = '#1d5a67';//'rgba(250, 144, 33,0.7)';
                    c.fillRect((HorizontalLineNumber*cellWidth)+vLineX,(VerticalLineNumber*cellWidth)+vLineY, vLineW, vLineH);
                }
                return IsVertical;
            }

            function PopulateArray(HLineNo , VLineNo)
            {
                ArrForStoringTurnStatus[HLineNo][VLineNo] = 'Filled';
                count++;
                alert(count);

            }
            // HTMLCanvasElement.prototype.getPosition = getPosition;
        </script>
    </div>
    <div class="row right-panel col-xs-4 col-md-4" id="right_panel_1" style="margin-right:-50px;">
        <div class="panel sub-right-panel col-xs-4 col-md-4" id="game_options" >

        </div>
        <div class="panel sub-right-panel col-xs-4 col-md-4" id="player_stats">

        </div>
        <div class="panel sub-right-panel col-xs-4 col-md-4" id="game_messages">

        </div>
    </div>
</div>